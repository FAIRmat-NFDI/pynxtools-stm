{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#sts-reader-documentation","title":"STS Reader Documentation","text":"<p>Note: Even though the reader name is STS reader, it also supports data from STM experiments. This is the first version of the reader according to the NeXus application definition NXsts (GitHub page) which is a generic template of concept definitions for STS and STM experiments. Later on, application definitions and readers specific to STM, STS, and AFM will be available. To stay up-to-date, keep visiting this page from time to time. From now onwards, when we mention STS, we are referring to both STM and STS techniques.</p>"},{"location":"index.html#explanation","title":"Explanation","text":"<ul> <li>Reader Explanation<ul> <li>Supproted File Formats and File Versions </li> <li>NeXus Application Definition</li> <li>Introduction to Reader Input Files</li> <li>Useful Functions</li> </ul> </li> </ul>"},{"location":"index.html#tutorial","title":"Tutorial","text":"<ul> <li>Reader Tutorial</li> <li>Nomad Tutorial</li> </ul>"},{"location":"index.html#how-to-guide","title":"How-To-Guide","text":"<ul> <li>How to Use Reader</li> </ul>"},{"location":"index.html#reference","title":"Reference","text":"<ul> <li>Reader in Nomad</li> <li>NeXus application definition in Reader</li> </ul>"},{"location":"index.html#project-and-community","title":"Project and Community","text":"<p>The reader is the part of project FAIRmat a FAIR data infrastructure for condensed-matter physics and the chemical physics of solids. </p> <ul> <li>FAIRmat project which is funded by NFDI</li> <li>Reach NOMAD via MATSCI community discourse</li> <li>Reach reader developers via GitHub issue tracker</li> <li>Reach pynxtools developers via GitHub issue tracker</li> <li>Reach the NeXus-FAIRmat community via the webpage or the GitHub issue tracker </li> </ul>"},{"location":"how_to_guide.html","title":"How-To-Guide","text":""},{"location":"how_to_guide.html#how-to-install-stm-reader","title":"How-To Install STM Reader","text":"<p>Installing STM reader is as simple as installing python package from PyPI. We recommend to install the reader in a python virtual environment.</p>"},{"location":"how_to_guide.html#installation-of-stm-reader-in-python-virtual-envrironment","title":"Installation of STM reader in python virtual envrironment","text":"<p>Run the followoing command step-by-step on your linux terminal</p> <pre><code>&lt;user&gt;$ vitualenv --python=3.10 .pyenv\n&lt;user&gt;$ source activate .pyenv/bin/activate\n(.pyenv) &lt;user&gt;$ pip install pynxtools-stm\n</code></pre> <p>That's it! You can run the <code>STM</code> reader from command line.</p>"},{"location":"how_to_guide.html#installation-of-stm-reader-in-development-mode-in-python-virtual-environment","title":"Installation of STM reader in development mode in python virtual environment","text":"<p>Install <code>STM</code> reader to develop according to you own expectation <pre><code>&lt;user&gt;$ vitualenv --python=3.10 .pyenv\n&lt;user&gt;$ source activate .pyenv/bin/activate\n(.pyenv) &lt;user&gt;$ git clone https://github.com/FAIRmat-NFDI/pynxtools-stm\n(.pyenv) &lt;user&gt;$ cd pynxtools-stm\n(.pyenv) &lt;user&gt;$ python -m pip install --upgrade pip\n(.pyenv) &lt;user&gt;$ pip install -e .\n(.pyenv) &lt;user&gt;$ pip install -e \".[dev]\"\n</code></pre></p>"},{"location":"how_to_guide.html#how-to-run-the-reader-from-cli","title":"How-To Run the Reader from CLI","text":"<p>In the command line interface, input files can be passed as positional arguments. Other arguments like the <code>reader</code> and the <code>nxdl</code> shall be given as keyword arguments.</p>"},{"location":"how_to_guide.html#run-sts-reader","title":"Run STS Reader","text":"<p>The following command can be used to run the <code>STS</code> reader from your python environment: <pre><code>(.pyenv) &lt;user&gt;$ dataconverter \\\n--reader sts \\\n--nxdl NXsts \\\n--output ./output.nxs \\ \n&lt;path-to STS_nanonis_generic_5e_1.dat&gt; \\\n&lt;path-to config_file_for_dat.json&gt; \\\n&lt;path-to Nanonis_Eln.yaml&gt;\n</code></pre></p>"},{"location":"how_to_guide.html#run-stm-reader","title":"Run STM Reader","text":"<p>Use the following command to run the <code>STM</code> reader from your python environment: <pre><code>(.pyenv) &lt;user&gt;$ dataconverter \\\n--reader sts \\\n--nxdl NXsts \\\n--output ./output.nxs \\\n&lt;path-to STM_nanonis_generic_5e.sxm&gt; \\\n&lt;path-to config_file_for_sxm.json&gt; \\\n&lt;path-to Nanonis_Eln.yaml&gt; \\\n</code></pre></p>"},{"location":"how_to_guide.html#want-to-contribute-or-extend-the-reader-functionality","title":"Want to Contribute or Extend the Reader Functionality","text":"<p>We appreciate any comments, extentions or improvements on the existing reader from users. Currently the reader supports the versions <code>4.5</code>, <code>5e</code> from <code>Generic</code> model of <code>Nanonis</code> vendor. To include the other versions of the <code>Generic</code> model, extend the class <code>StmNanonisGeneric</code> and <code>StsNanonisGeneric</code> by including versions in <code>__version__</code> attribute. Also include the model and version of the brand in <code>Spm</code> class. </p>"},{"location":"how_to_guide.html#how-to-contribute-or-extend-the-reader-functionality","title":"How to Contribute or Extend the Reader Functionality","text":"<p>If you want to add the different versions of the <code>Nanonis Generic</code> model for <code>STM</code> experiment, please check the <code>STM_Nanonis</code> class for <code>STM</code> experiment, which parses the data into a python dict of slash (<code>/</code>) separated key-value pair (see the right part of the config file). The class uses the <code>nanonispy</code> sub-package to read the <code>sxm</code> type file. That should also be checked and modified (if needed).</p> <p>If you add different versions of the <code>Nanonis Generic</code> model for <code>STS</code> experiment, please check the <code>BiasSpecData_Nanonis</code> class for <code>STS</code> experiment. The class reads the raw data from the raw files into a dict of slash separated key-value pair (see the config file). </p> <p>If you go for a completely different model (e.g., from a different brand), please handle it in a new module with different functions and classes. </p> <p>Later on, please add the relevant tests in the plugin test.</p> <p>Done! Great, then please create a pull request.</p>"},{"location":"explanation/reader-explanation.html","title":"STS Reader","text":"<p>The prime purpose of the reader is to transform data from measurement files into community-defined concepts constructed by the SPM community which allows experimentalists to store, organize, search, analyze, and share experimental data (only within the NOMAD platform) among the scientific communities. The reader builds on the NXsts application definition and needs an experimental file, a config file and a eln file to transform the experimental data into the NXsts application concepts. </p>"},{"location":"explanation/reader-explanation.html#supported-file-formats-and-file-versions","title":"Supported File Formats and File Versions","text":"<ul> <li>Can parse Scanning Tunneling Spectroscopy (STS) from<ul> <li><code>.dat</code> file format from Nanonis: <ul> <li>Versions: Generic 5e, Generic 4.5</li> </ul> </li> </ul> </li> <li>Can parse Scanning Tunneling Microscopy (STM) from<ul> <li><code>.sxm</code> file format from Nanonis: <ul> <li>Versions: Generic 5e, Generic 4.5</li> </ul> </li> </ul> </li> </ul>"},{"location":"explanation/reader-explanation.html#nexus-application-definition","title":"NeXus Application Definition","text":"<p>To define a standardized schema, we chose the NeXus format and we defined an application definition <code>NXsts</code> for standardizing data from <code>STM</code> as well as <code>STS</code> experiments. You can find the application definition and information on related NeXus base classes on the NeXus-FAIRmat page for Scanning Tunneling Spectroscopy.</p>"},{"location":"explanation/reader-explanation.html#introduction-to-reader-input-files","title":"Introduction to Reader Input Files","text":"<p>To utilize, reuse, or extend the reader, the different reader input files must be understood. The files are using specific semantic rules so that reader can understand the files and work with their content. The input files are:</p> <ol> <li>Raw File(s) containing data from experiments</li> <li>ELN (Electronic Lab Notebook) to collect user input data</li> <li>Config file that connect the data to concepts in the NeXus application definition <code>NXsts</code>.</li> </ol>"},{"location":"explanation/reader-explanation.html#raw-file","title":"Raw File","text":"<p>This type of file (such as <code>example.dat</code> or <code>example.sxm</code>) is the data file generated during the experiment. </p>"},{"location":"explanation/reader-explanation.html#eln-electronic-lab-notebook","title":"ELN (Electronic Lab Notebook)","text":"<p>This file supports user input data that is not part of the experimental data file. There are two ways to define or write ELN files. The first one can be distinguished, for sake of explanation, as command line ELN. This should be a YAML file (with <code>.yaml</code> file extension ). Such type of ELN needs to be used to run the reader from the command line. The second one can be called, for sake of explanation, NOMAD Schema ELN. This is also a YAML file, but with the extension <code>.scheme.archive.yaml</code>. This ELN is needed if the reader is being used from NOMAD. Note that NOMAD will parse the NOMAD Schema ELN into a YAML file of the first type.</p> <p>The given example below is a short description of the NOMAD schema ELN (a complete example can be found here). <pre><code>definitions:\n  name: Eln example for STS\n  sections:\n    stm:\n      base_sections:\n        - nomad.datamodel.metainfo.eln.NexusDataConverter\n        - nomad.datamodel.data.EntryData\n      m_annotations:\n        template:\n          reader: sts\n          nxdl: NXsts\n        eln:\n          hide: []\n      quantities:\n        default:\n          type: str\n          m_annotations:\n            eln:\n              component: StringEditQuantity\n          description: |\n            The name of the default plot (e.g. li_demod_1_x, current) to be displayed on the entry of NeXus file.\n        definition:\n          type: \n            type_kind: Enum\n            type_data:\n              - NXsts\n          m_annotations:\n            eln:\n              component: EnumEditQuantity\n          description: ''\n        experiment_type:\n          type:\n            type_kind: Enum\n            type_data:\n              - sts\n              - stm\n          m_annotations:\n            eln:\n              component: EnumEditQuantity\n          description: 'Only two type of experiments are allowed: sts and stm.'\n      sub_sections:\n        Instrument:\n          section:\n            m_annotations:\n              eln:\n                overview: true\n            quantities:\n              stm_head_temp:\n                type: np.float64\n                unit: K\n                m_annotations:\n                  eln:\n                    component: NumberEditQuantity\n                    defaultDisplayUnit: K\n                description: |\n                  Temperature of STM head. Note: At least one field from stm_head_temperature,\n                  cryo_bottom_temp and cryo_sheild_temp must be provided. '\n        sample:\n          section:\n            m_annotations:\n              eln:\n                overview: true\n            quantities:\n              name:\n                type: str\n                m_annotations:\n                  eln:\n                    component: StringEditQuantity\n                description: |\n                  Name of the sample.\n</code></pre></p> <p>The <code>section</code>, <code>sub_sections</code>, and <code>quantities</code> refer to the root level entitiy (behaves like a <code>group</code>), <code>group</code>, and <code>field</code> of the NeXus definition, respectively. The given schema ELN can be read as follows, <code>stm</code> ELN has direct fields <code>default</code>, <code>definition</code> and direct groups <code>Instrument</code>, <code>Sample</code>, with each group optionally containing nested <code>group</code>s and <code>field</code>s.</p> <p>The example given below is to explain the command line ELN. <pre><code>Instrument:\n  hardware:\n    name: Nanonis\n  lock_in:\n    lock_in_data_flip_number: -1.0\n    modulation_amplitude:\n      unit: V\n      value: 0.005\n    modulation_frequency:\n      unit: Hz\n      value: 973.0\n    status: 'OFF'\n  piezo_config:\n    active_calib: LHe\n  sample_bias:\n    bias:\n      unit: V\n      value: 0.005\n    bias_calibration: 1.0\n    bias_offset:\n      unit: V\n      value: '0'\n  software:\n    rt_release: '10771'\n    ui_release: '10771'\n    vendor: nanonis\n    version: Generic 5e\n  stm_head_temp:\n    unit: K\n    value: 5.04866\ncollection_identifier: TiSe2_2303a_annealing_300C_5min_evaporate_Pyrene_1_\ndefault: backward\ndefinition: NXsts\nentry_identifier: TiSe2_2303a_annealing_300C_5min_evaporate_Pyrene_1_0070\nexperiment_description: A new TiSe2, annealed at 300 C for 5 min, then cool down to\n  RT, evaporate the Pyrene on RT, 2.2 E -7, totally 10 s.\nexperiment_identifier: C:\\Users\\SPM-PEEM\\Desktop\\DATA_Nanonis\\20220711_CreaTec_Service_Benchmarks_LHe\\Nanonis-Session-PMD100-HVHU_CreaTec_Service_PalmaLabBerlin220711\nexperiment_type: stm\ntype: background\n</code></pre> This type of ELN needs to be used if the reader is run from the command line. To know which fields and groups refer to which type of data, one needs to read the NeXus definition on the FAIRmat NeXus Proposal page or in the GitHub repository. </p>"},{"location":"explanation/reader-explanation.html#config-file","title":"Config File","text":"<p>The config file is used to map the raw data coming from the STS experiment file and the user input data (from the ELN) to the concepts defined in the NeXus definitions.</p> <p><pre><code>{\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/ENVIRONMENT[environment]/sweep_control/circuit/animations_period/@units\": \"/NanonisMain/Animations Period/unit\",\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/lock_in/demodulated_signal/@units\": \"/Lock-in/Demodulated signal/unit\",\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/lock_in/high_pass\": \"@eln\",\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/lock_in/low_pass\": \"@eln\",\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/lock_in/hardware\": \"@eln\",\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/2nd_order_corr_N\": {\"X\":{\"value\":\"/Piezo Configuration/2nd order corr X/value\",\n                                                                                \"unit\":\"/Piezo Configuration/2nd order corr X/unit\"},\n                                                                           \"Y\":{\"value\":\"/Piezo Configuration/2nd order corr Y/value\",\n                                                                                \"unit\":\"/Piezo Configuration/2nd order corr Y/unit\"}},\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/active_calib\": \"/Piezo Configuration/Active Calib./value\",\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/calib_N\": {\"X\":{\"value\":\"/Piezo Configuration/Calib. X/value\",\n                                                                       \"unit\":\"/Piezo Configuration/Calib. X/unit\"},\n                                                                  \"Y\":{\"value\":\"/Piezo Configuration/Calib. Y/value\",\n                                                                       \"unit\":\"/Piezo Configuration/Calib. Y/unit\"},\n                                                                  \"Z\":{\"value\":\"/Piezo Configuration/Calib. Z/value\",\n                                                                       \"unit\":\"/Piezo Configuration/Calib. Z/unit\"}},\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/curvature_radius_N\": {\"X\":{\"value\":\"/Piezo Configuration/Curvature radius X/value\"},\n                                                                              \"Y\":{\"value\":\"/Piezo Configuration/Curvature radius Y/value\"},\n                                                                             \"Z\":{\"value\":\"/Piezo Configuration/Curvature radius Z/value\"}},\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/curvature_radius_N/@units\": {\"X\":{\"value\": \"/Piezo Configuration/Curvature radius X/unit\"},\n                                                                                    \"Y\":{\"value\": \"/Piezo Configuration/Curvature radius Y/unit\"},\n                                                                                    \"Z\":{\"value\": \"/Piezo Configuration/Curvature radius Z/unit\"}},\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/drift_N\": {\"X\":{\"value\":\"/Piezo Configuration/Drift X/value\",\n                                                                       \"unit\":\"/Piezo Configuration/Drift X/unit\"},\n                                                                  \"Y\":{\"value\":\"/Piezo Configuration/Drift Y/value\",\n                                                                       \"unit\":\"/Piezo Configuration/Drift Y/unit\"},\n                                                                  \"Z\":{\"value\":\"/Piezo Configuration/Drift Z/value\",\n                                                                       \"unit\":\"/Piezo Configuration/Drift Z/unit\"}},\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/drift_correction_status\": \"/Piezo Configuration/Drift correction status/value\",\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/drift_correction_status/@units\": \"/Piezo Configuration/Drift correction status/unit\",\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/hv_gain_N\": {\"X\":{\"value\": \"/Piezo Configuration/HV Gain X/value\"},\n                                                                    \"Y\":{\"value\": \"/Piezo Configuration/HV Gain Y/value\"},\n                                                                    \"Z\":{\"value\": \"/Piezo Configuration/HV Gain Z/value\"}},\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/tilt_N\": {\"X\":{\"value\": \"/Piezo Configuration/Tilt X/value\"},\n                                                                 \"Y\":{\"value\": \"/Piezo Configuration/Tilt Y/value\"},\n                                                                 \"Z\":{\"value\": \"/Piezo Configuration/Tilt Z/value\"}},\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/tilt_N/@units\": {\"X\":{\"value\": \"/Piezo Configuration/Tilt X/unit\"},\n                                                                        \"Y\":{\"value\": \"/Piezo Configuration/Tilt Y/unit\"},\n                                                                        \"Z\":{\"value\": \"/Piezo Configuration/Tilt Z/unit\"}},\n    \"/ENTRY[entry]/INSTRUMENT[instrument]/sample_bias/bias\": \"/Bias/Bias/value\",\n    \"/ENTRY[entry]/single_point\": \"None\",\n    \"/ENTRY[entry]/type\": \"None\",\n    \"/ENTRY[entry]/DATA[data]\": {\"0\": [\"/dat_mat_components/Bias calc/value\",\n                                 \"/dat_mat_components/Bias calc/unit\"],\n                              \"1\": [\"/dat_mat_components/Bias/value\",\n                                   \"/dat_mat_components/Bias/unit\",\n                                   \"/dat_mat_components/Current/value\",\n                                   \"/dat_mat_components/Current/unit\",\n                                   \"/dat_mat_components/Temperature 1/value\",\n                                   \"/dat_mat_components/Temperature 1/unit\",\n                                   \"/dat_mat_components/LI Demod 1 X/value\",\n                                   \"/dat_mat_components/LI Demod 1 X/unit\",\n                                   \"/dat_mat_components/LI Demod 1 Y/value\",\n                                   \"/dat_mat_components/LI Demod 1 Y/unit\",\n                                   \"/dat_mat_components/LI Demod 2 X/value\",\n                                   \"/dat_mat_components/LI Demod 2 X/unit\",\n                                   \"/dat_mat_components/LI Demod 2 Y/value\",\n                                   \"/dat_mat_components/LI Demod 2 Y/unit\"],\n                              \"2\": [\"/dat_mat_components/Bias [filt]/value\",\n                                   \"/dat_mat_components/Bias [filt]/unit\",\n                                   \"dat_mat_components/Bias [filt]/metadata\",\n                                   \"/dat_mat_components/Current [filt]/value\",\n                                   \"/dat_mat_components/Current [filt]/unit\",\n                                   \"/dat_mat_components/Current [filt]/metadata\",\n                                   \"/dat_mat_components/Temperature 1 [filt]/value\",\n                                   \"/dat_mat_components/Temperature 1 [filt]/unit\",\n                                   \"/dat_mat_components/Temperature 1 [filt]/metadata\",\n                                   \"/dat_mat_components/LI Demod 1 X [filt]/value\",\n                                   \"/dat_mat_components/LI Demod 1 X [filt]/unit\",\n                                   \"/dat_mat_components/LI Demod 1 X [filt]/metadata\",\n                                   \"/dat_mat_components/LI Demod 1 Y [filt]/value\",\n                                   \"/dat_mat_components/LI Demod 1 Y [filt]/unit\",\n                                   \"/dat_mat_components/LI Demod 1 Y [filt]/metadata\",\n                                   \"/dat_mat_components/LI Demod 2 X [filt]/value\",\n                                   \"/dat_mat_components/LI Demod 2 X [filt]/unit\",\n                                   \"/dat_mat_components/LI Demod 2 X [filt]/metadata\",\n                                   \"/dat_mat_components/LI Demod 2 Y [filt]/value\",\n                                   \"/dat_mat_components/LI Demod 2 Y [filt]/unit\",\n                                   \"/dat_mat_components/LI Demod 2 Y [filt]/metadata\"]}\n}\n</code></pre> NOTES</p> <ul> <li>Each key is pointing to the NeXus concept (e.g. <code>/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/active_calib</code> key nevigates <code>ENTRY</code> -&gt; <code>INSTRUMENT</code> -&gt; <code>piezo_config</code> -&gt; <code>active_calib</code> field in <code>NXsts</code> application definition.) in the NeXus application definition.  </li> <li>If the value is denoted by the token <code>@eln</code>, the data must come from the ELN (user provided), but this can be changed if the raw file contains that piece of data as well. </li> <li>To update (if needed) the config file, a set of rules needs to be followed:</li> <li>The dictionaries in the config files have the following meaning:     <pre><code>\"/ENTRY[entry]/INSTRUMENT[instrument]/lock_in/harmonic_order_N\": {\"D1\": {\"value\": \"/Lock-in/Harmonic D1/value\"},\n                                                                  \"D2\": {\"value\": \"/Lock-in/Harmonic D2/value\"}},\n</code></pre>     Here, the part <code>N</code> in field <code>harmonic_order_N</code> can be considered as the name of dimensions and can be replaced by <code>D1</code> and <code>D2</code> to  write two fields of <code>harmonic_order</code> . This can be extended to further dimensions.</li> <li>List for the same concept     <pre><code>\"/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/active_calib\": [\"/Piezo Configuration/Active Calib.\",\n                                                                   \"/Piezo Calibration/Active Calib.\"],\n</code></pre>     For different type of software versions the raw data path could be different for the same concept. For example, Nanonis software <code>generic 5e</code> has <code>/Piezo Configuration/Active Calib.</code> and generic 4.5 has <code>/Piezo Calibration/Active Calib.</code> for the same concept <code>/ENTRY[entry]/INSTRUMENT[instrument]/piezo_config/active_calib</code>.</li> <li>In the config file, concepts that take data from the ELN are denoted by <code>@eln</code>. Otherwise, data will come from experimental raw files.</li> <li>Importantly, the <code>NXdata</code> concept <code>/ENTRY[entry]/DATA[data]</code> takes a dict of lists. Each key (<code>0</code>, <code>1</code> ...) of the dict refers to an NXdata group with fields <code>bias</code> and <code>current</code> for multiple given setups, i.e, with and without <code>filter</code> check points. For another setup, one can extend the dict following the same convention used here.</li> </ul>"},{"location":"explanation/reader-explanation.html#useful-functions","title":"Useful Functions:","text":"<p>There are a few functions that you can utilize to make this reader compatible with your data:</p> <ul> <li>get_stm_raw_file_info(): For <code>STM</code> experiments, the function can return the slash separated dict in a text file. This dict helps to write or modify the config file according to the raw data file. </li> </ul> <pre><code>from pynxtools_stm import get_stm_raw_file_info\n\n# for stm (.sxm) file\nget_stm_raw_file_info('STM_nanonis_generic_5e.sxm')\n</code></pre> <ul> <li>get_sts_raw_file_info: For <code>STS</code> experiment to get the slash separated dict from the <code>STS</code> raw file one can use this function. It will write a txt file in the working directory.</li> </ul> <pre><code>from pynxtools_stm import get_sts_raw_file_info\n\n# for sts (.dat) file\nget_sts_raw_file_info('STS_nanonis_generic_5e_1.dat')\n</code></pre>"},{"location":"how-to-guides/how-to-interact-with-reader.html","title":"How to Use the STM Reader","text":""},{"location":"how-to-guides/how-to-interact-with-reader.html#how-to-install-the-stm-reader","title":"How To Install the STM Reader","text":"<p>The STM reader can be installed as a python package from PyPI. We recommend to install the reader in a python virtual environment.</p>"},{"location":"how-to-guides/how-to-interact-with-reader.html#installation-of-stm-reader-in-python-virtual-envrironment","title":"Installation of STM reader in python virtual envrironment","text":"<p>Run the followoing command step-by-step on your linux terminal</p> <pre><code>&lt;user&gt;$ vitualenv --python=3.10 .pyenv\n&lt;user&gt;$ source activate .pyenv/bin/activate\n(.pyenv) &lt;user&gt;$ pip install pynxtools-stm\n</code></pre> <p>That's it! You can run the <code>STM</code> reader from command line.</p>"},{"location":"how-to-guides/how-to-interact-with-reader.html#installation-of-stm-reader-in-development-mode-in-python-virtual-environment","title":"Installation of STM reader in development mode in python virtual environment","text":"<p>If you want to make changes to the <code>STM</code> reader, you can install in to development mode <pre><code>&lt;user&gt;$ vitualenv --python=3.10 .pyenv\n&lt;user&gt;$ source activate .pyenv/bin/activate\n(.pyenv) &lt;user&gt;$ git clone https://github.com/FAIRmat-NFDI/pynxtools-stm\n(.pyenv) &lt;user&gt;$ cd pynxtools-stm\n(.pyenv) &lt;user&gt;$ python -m pip install --upgrade pip\n(.pyenv) &lt;user&gt;$ pip install -e .\n(.pyenv) &lt;user&gt;$ pip install -e \".[dev]\"\n</code></pre></p>"},{"location":"how-to-guides/how-to-interact-with-reader.html#how-to-run-the-reader-from-cli","title":"How to Run the Reader from CLI","text":"<p>In the command line interface, input files can be passed as positional arguments. Other arguments like the <code>reader</code> and the <code>nxdl</code> shall be given as keyword arguments.</p>"},{"location":"how-to-guides/how-to-interact-with-reader.html#run-sts-reader","title":"Run STS Reader","text":"<p>The following command can be used to run the <code>STS</code> reader from your python environment: <pre><code>(.pyenv) &lt;user&gt;$ dataconverter \\\n--reader sts \\\n--nxdl NXsts \\\n--output ./output.nxs \\ \n&lt;path-to STS_nanonis_generic_5e_1.dat&gt; \\\n&lt;path-to config_file_for_dat.json&gt; \\\n&lt;path-to Nanonis_Eln.yaml&gt;\n</code></pre></p>"},{"location":"how-to-guides/how-to-interact-with-reader.html#run-stm-reader","title":"Run STM Reader","text":"<p>Use the following command to run the <code>STM</code> reader from your python environment: <pre><code>(.pyenv) &lt;user&gt;$ dataconverter \\\n--reader sts \\\n--nxdl NXsts \\\n--output ./output.nxs \\\n&lt;path-to STM_nanonis_generic_5e.sxm&gt; \\\n&lt;path-to config_file_for_sxm.json&gt; \\\n&lt;path-to Nanonis_Eln.yaml&gt; \\\n</code></pre></p>"},{"location":"reference/reference.html","title":"References","text":"<p>To get the full benefits of the reader, you can visit and utilize the following tools and platforms. </p>"},{"location":"reference/reference.html#nomad","title":"NOMAD","text":"<p>The reader is fully integrated into the NOMAD research data management platform (a free and open sorce project for data management). In NOMAD, you can find a full example for both the <code>STS</code> as well as the <code>STM</code> reader. The example can be resused to create new uploads and later the uploads can be compared, analyzed, publihsed, and shared with the different colaborators and communities. You can have a look at the NOMAD documentation as well.</p>"},{"location":"reference/reference.html#nexus","title":"NeXus","text":"<p>The reader is using the NXsts (GitHub page) application definition (as a standardized schema) which is developed using the NeXus ontology (GitHub page). To understand the application definition, properly understanding NeXus ontology can be helpful.</p>"},{"location":"reference/reference.html#sts-reader","title":"STS Reader","text":"<p>The main goal of the STS Reader is to transform different file formats from diverse STS lab into STS community standard STS application definition, community defined template that define indivisual concept associated with STS experiment constructed by SPM community.</p>"},{"location":"reference/reference.html#sts-example","title":"STS Example","text":"<p>There are diverse examples for several versions (Generic 5e and Generic 4.5) of the Nanonis software for STS experiments at https://gitlab.mpcdf.mpg.de. But, to utilize that examples one must have an account at https://gitlab.mpcdf.mpg.de. If still you want to try out the examples from the STS reader, please reach out to Rubel Mozumder or the docker container (discussed below).</p> <p>To get a detailed overview of the sts reader implementation visit pynxtools-stm.</p>"},{"location":"reference/reference.html#sts-docker-image","title":"STS docker image","text":"<p>STS docker image contains all prerequisite tools (e.g. jupyter-notebook) and library to run STS reader. To use the image user needs to install docker engine.</p> <p>STS Image: <code>gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-remote-tools-hub/sts-jupyter:latest</code></p> <p>To run the STS image as a docker container copy the code below in a file <code>docker-compose.yaml</code></p> <pre><code># docker-compose.yaml\nversion: \"3.9\"\nservices:\n    sts:\n        image: gitlab-registry.mpcdf.mpg.de/nomad-lab/nomad-remote-tools-hub/sts-jupyter:latest\n        ports:\n            - 8888:8888\n        volumes:\n            - ./example:/home/jovyan/work_dir\n        working_dir: /home/jovyan/work_dir\n</code></pre> <p>and launch the file from the same directory with <code>docker compose up</code> command.</p>"},{"location":"tutorial/nomad-tutorial.html","title":"Upload Your Data in NOMAD","text":"<p>Attention</p> <p>This part is on progress.</p>"},{"location":"tutorial/nomad-tutorial.html#examples-in-nomad","title":"Examples in NOMAD","text":"<p>Currently, we have two examples in NOMAD, one for STS (Scanning Tunneling Spectroscopy) and one for STM (Scanning Tunneling Microscopy).</p>"},{"location":"tutorial/nomad-tutorial.html#sts-example","title":"STS Example","text":"<p>The STS example Scanning Tunneling Spectroscopy (STS) from Scanning Probe Microscopy family. It can transform the data from files generated from nanonis instrument and software into a data format defined by NeXus application definition NXsts.</p>"},{"location":"tutorial/nomad-tutorial.html#stm-example","title":"STM Example","text":"<p>The STM example Scanning Tunneling Microscopy (STM) from Scanning Probe Microscopy family. It can transform the data from files generated from nanonis instrument and software into a data format defined by NeXus application definition NXstm.</p>"},{"location":"tutorial/reader-tutorial.html","title":"Know More About Reader","text":"<p>Work in progress</p> <p>Complete documentation of this reader is still in progress.</p>"},{"location":"tutorial/reader-tutorial.html#want-to-contribute-or-extend-the-reader-functionality","title":"Want to Contribute or Extend the Reader Functionality","text":"<p>We appreciate any comments, extentions or improvements on the existing reader from users. Currently the reader supports the versions <code>4.5</code>, <code>5e</code> from <code>Generic</code> model of <code>Nanonis</code> vendor. To include the other versions of the <code>Generic</code> model, extend the class <code>StmNanonisGeneric</code> and <code>StsNanonisGeneric</code> by including versions in <code>__version__</code> attribute. Also include the model and version of the brand in <code>Spm</code> class. </p>"},{"location":"tutorial/reader-tutorial.html#how-to-contribute-or-extend-the-reader-functionality","title":"How to Contribute or Extend the Reader Functionality","text":"<p>If you want to add the different versions of the <code>Nanonis Generic</code> model for <code>STM</code> experiment, please check the <code>STM_Nanonis</code> class for <code>STM</code> experiment, which parses the data into a python dict of slash (<code>/</code>) separated key-value pair (see the right part of the config file). The class uses the <code>nanonispy</code> sub-package to read the <code>sxm</code> type file. That should also be checked and modified (if needed).</p> <p>If you add different versions of the <code>Nanonis Generic</code> model for <code>STS</code> experiment, please check the <code>BiasSpecData_Nanonis</code> class for <code>STS</code> experiment. The class reads the raw data from the raw files into a dict of slash separated key-value pair (see the config file). </p> <p>If you go for a completely different model (e.g., from a different brand), please handle it in a new module with different functions and classes. </p> <p>Later on, please add the relevant tests in the plugin test.</p> <p>Done! Great, then please create a pull request.</p>"}]}